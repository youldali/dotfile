networks:
  reverseproxy:
    driver: ${NETWORKS_DRIVER}
  database:
    driver: ${NETWORKS_DRIVER}
  devtools:
    driver: ${NETWORKS_DRIVER}

volumes:
  postgres:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  portainer:
    driver: ${VOLUMES_DRIVER}

services:
  ### Postgres Database #########################################
  postgres:
    image: postgres:14.9
    ports:
      - 5499:5432
    networks:
      - database
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: main_db
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root

  # Redis is not used at the moment
  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - redis:/data
    ports:
      - '${REDIS_PORT}:6379'
    networks:
      - devtools
    labels:
      - traefik.enable=false

  # ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      - reverseproxy
      - devtools
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.redisadmin.rule=Host(`redis.${HOSTNAME}`)
      - traefik.http.routers.redisadmin.entrypoints=http, https
      - traefik.http.routers.redisadmin.tls=true
      - traefik.http.routers.redisadmin.service=redisadmin
      - traefik.http.services.redisadmin.loadbalancer.server.port=80
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_reverseproxy

  ### Router TRAEFIK #########################################
  traefik:
    build:
      context: ./traefik
    command: --docker \
      --logLevel=DEBUG --accessLogsFile=/dev/stdout --providers.docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./certs:/etc/certs:ro
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml
      - ./traefik/traefik.config.toml:/etc/traefik/traefik.config.toml
    ports:
      - '${TRAEFIK_HOST_HTTP_PORT}:80'
      - '${TRAEFIK_HOST_HTTPS_PORT}:443'
    networks:
      - reverseproxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontrouter.rule=Host(`traefik.${HOSTNAME}`)
      - traefik.http.routers.frontrouter.entrypoints=http, https
      - traefik.http.routers.frontrouter.tls=true
      - traefik.http.routers.frontrouter.service=frontrouter
      - traefik.http.services.frontrouter.loadbalancer.server.port=8080
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_reverseproxy

  ### Portainer ################################################
  portainer:
    image: portainer/portainer:1.24.1
    command: -H unix:///var/run/docker.sock --no-auth
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - 'dockerhost:${DOCKER_HOST_IP}'
    networks:
      - reverseproxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${HOSTNAME}`)
      - traefik.http.routers.portainer.entrypoints=http, https
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_reverseproxy
